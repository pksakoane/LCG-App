{"version":3,"file":"page-router-outlet.d.ts","sources":["page-router-outlet.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, InjectionToken, Injector, OnDestroy, EventEmitter, Type, ViewContainerRef, ElementRef, InjectFlags, NgZone } from '@angular/core';\nimport { ActivatedRoute, ChildrenOutletContexts } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { PageFactory } from '../platform-providers';\nimport { NSLocationStrategy } from './ns-location-strategy';\nimport { NSRouteReuseStrategy } from './ns-route-reuse-strategy';\nexport declare class PageRoute {\n    activatedRoute: BehaviorSubject<ActivatedRoute>;\n    constructor(startRoute: ActivatedRoute);\n}\nexport declare class DestructibleInjector implements Injector {\n    private destructableProviders;\n    private parent;\n    private refs;\n    constructor(destructableProviders: ProviderSet, parent: Injector);\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    destroy(): void;\n}\ndeclare type ProviderSet = Set<Type<any> | InjectionToken<any>>;\nexport declare class PageRouterOutlet implements OnDestroy {\n    private parentContexts;\n    private location;\n    private locationStrategy;\n    private componentFactoryResolver;\n    private resolver;\n    private changeDetector;\n    private pageFactory;\n    private routeReuseStrategy;\n    private ngZone;\n    private activated;\n    private _activatedRoute;\n    private detachedLoaderFactory;\n    private outlet;\n    private name;\n    private isEmptyOutlet;\n    private viewUtil;\n    private frame;\n    activateEvents: EventEmitter<any>;\n    deactivateEvents: EventEmitter<any>;\n    /** @deprecated from Angular since v4 */\n    get locationInjector(): Injector;\n    /** @deprecated from Angular since v4 */\n    get locationFactoryResolver(): ComponentFactoryResolver;\n    get isActivated(): boolean;\n    get component(): Object;\n    get activatedRoute(): ActivatedRoute;\n    constructor(parentContexts: ChildrenOutletContexts, location: ViewContainerRef, name: string, actionBarVisibility: string, isEmptyOutlet: boolean, locationStrategy: NSLocationStrategy, componentFactoryResolver: ComponentFactoryResolver, resolver: ComponentFactoryResolver, changeDetector: ChangeDetectorRef, pageFactory: PageFactory, routeReuseStrategy: NSRouteReuseStrategy, ngZone: NgZone, elRef: ElementRef);\n    setActionBarVisibility(actionBarVisibility: string): void;\n    ngOnDestroy(): void;\n    deactivate(): void;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach(): ComponentRef<any>;\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute): void;\n    /**\n     * Called by the Router to instantiate a new component during the commit phase of a navigation.\n     * This method in turn is responsible for calling the `routerOnActivate` hook of its child.\n     */\n    activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null): void;\n    private activateOnGoForward;\n    private loadComponentInPage;\n    private markActivatedRoute;\n    private getComponentFactory;\n    private getOutlet;\n}\nexport {};\n"]}