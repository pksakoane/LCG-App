{"version":3,"file":"ns-location-strategy.d.ts","sources":["ns-location-strategy.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { LocationStrategy } from '@angular/common';\nimport { UrlSegmentGroup, ActivatedRouteSnapshot } from '@angular/router';\nimport { Frame } from '@nativescript/core';\nimport { FrameService } from '../frame.service';\nimport { Outlet, NavigationOptions } from './ns-location-utils';\nexport declare class NSLocationStrategy extends LocationStrategy {\n    private frameService;\n    private outlets;\n    private currentOutlet;\n    private popStateCallbacks;\n    private _currentNavigationOptions;\n    private currentUrlTree;\n    _modalNavigationDepth: number;\n    constructor(frameService: FrameService);\n    path(): string;\n    prepareExternalUrl(internal: string): string;\n    pushState(state: any, title: string, url: string, queryParams: string): void;\n    pushStateInternal(state: any, title: string, url: string, queryParams: string): void;\n    replaceState(state: any, title: string, url: string, queryParams: string): void;\n    forward(): void;\n    back(outlet?: Outlet, frame?: Frame): void;\n    canGoBack(outlet?: Outlet): boolean;\n    onPopState(fn: (_: any) => any): void;\n    getBaseHref(): string;\n    private callPopState;\n    toString(): string;\n    _beginBackPageNavigation(frame: Frame): void;\n    _finishBackPageNavigation(frame: Frame): void;\n    _beginModalNavigation(frame: Frame): void;\n    _closeModalNavigation(): void;\n    _beginPageNavigation(frame: Frame): NavigationOptions;\n    _setNavigationOptions(options: NavigationOptions): void;\n    _getOutlets(): Array<Outlet>;\n    updateOutletFrame(outlet: Outlet, frame: Frame, isEmptyOutletFrame: boolean): void;\n    clearOutlet(frame: Frame): void;\n    getSegmentGroupFullPath(segmentGroup: UrlSegmentGroup): string;\n    getRouteFullPath(currentRoute: any): string;\n    getPathByOutlets(urlSegmentGroup: any): string;\n    findOutlet(outletKey: string, activatedRouteSnapshot?: ActivatedRouteSnapshot): Outlet;\n    private findOutletByModal;\n    private getOutletByFrame;\n    private updateStates;\n    private updateParentsStates;\n    private createOutlet;\n    private getSegmentGroupByOutlet;\n    private updateSegmentGroup;\n    private upsertModalOutlet;\n    private getOutletKey;\n    ngOnDestroy(): void;\n}\n"]}