import { View, LayoutBase, Page, Frame, AbsoluteLayout, ActivityIndicator, BottomNavigation, Button, ContentView, DatePicker, DockLayout, GridLayout, HtmlView, Image, Label, ListPicker, ListView, Placeholder, Progress, ProxyViewContainer, Repeater, ScrollView, SearchBar, SegmentedBar, SegmentedBarItem, Slider, StackLayout, FlexboxLayout, Switch, TabView, TabStrip, TabStripItem, TabContentItem, Tabs, TextField, TextView, TimePicker, WebView, WrapLayout, FormattedString, Span } from '@nativescript/core';
export class InvisibleNode extends View {
    constructor() {
        super();
        this.nodeType = 1;
        this.nodeName = getClassName(this);
    }
    toString() {
        return `${this.nodeName}(${this.id})`;
    }
}
export class CommentNode extends InvisibleNode {
    constructor() {
        super();
        this.meta = {
            skipAddToDom: true,
        };
        this.id = CommentNode.id.toString();
        CommentNode.id += 1;
    }
}
CommentNode.id = 0;
export class TextNode extends InvisibleNode {
    constructor() {
        super();
        this.meta = {
            skipAddToDom: true,
        };
        this.id = TextNode.id.toString();
        TextNode.id += 1;
    }
}
TextNode.id = 0;
const getClassName = (instance) => instance.constructor.name;
const ɵ0 = getClassName;
export function isDetachedElement(element) {
    return element && element.meta && element.meta.skipAddToDom;
}
export function isView(view) {
    return view instanceof View;
}
export function isInvisibleNode(view) {
    return view instanceof InvisibleNode;
}
const elementMap = new Map();
const camelCaseSplit = /([a-z0-9])([A-Z])/g;
const defaultViewMeta = { skipAddToDom: false };
export function registerElement(elementName, resolver, meta) {
    const entry = { resolver, meta };
    elementMap.set(elementName, entry);
    elementMap.set(elementName.toLowerCase(), entry);
    elementMap.set(elementName.replace(camelCaseSplit, '$1-$2').toLowerCase(), entry);
}
export function getViewClass(elementName) {
    const entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
    if (!entry) {
        throw new TypeError(`No known component for element ${elementName}.`);
    }
    try {
        return entry.resolver();
    }
    catch (e) {
        throw new TypeError(`Could not load view for: ${elementName}.${e}`);
    }
}
export function getViewMeta(nodeName) {
    const entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
    return (entry && entry.meta) || defaultViewMeta;
}
export function isKnownView(elementName) {
    return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
export function getSingleViewRecursive(nodes, nestLevel) {
    const actualNodes = nodes.filter((node) => !(node instanceof InvisibleNode));
    if (actualNodes.length === 0) {
        throw new Error(`No suitable views found in list template! ` + `Nesting level: ${nestLevel}`);
    }
    else if (actualNodes.length > 1) {
        throw new Error(`More than one view found in list template!` + `Nesting level: ${nestLevel}`);
    }
    const rootLayout = actualNodes[0];
    if (!rootLayout) {
        return getSingleViewRecursive(rootLayout.children, nestLevel + 1);
    }
    const parentLayout = rootLayout.parent;
    if (parentLayout instanceof LayoutBase) {
        let node = rootLayout.parentNode;
        parentLayout.removeChild(rootLayout);
        rootLayout.parentNode = node;
    }
    return rootLayout;
}
const ɵ1 = (parent, child, next) => {
    // Page cannot be added to Frame with _addChildFromBuilder (thwos "use defaultPage" error)
    if (isInvisibleNode(child)) {
        return;
    }
    else if (child instanceof Page) {
        parent.navigate({ create: () => child });
    }
    else {
        throw new Error('Only a Page can be a child of Frame');
    }
};
const frameMeta = {
    insertChild: ɵ1,
};
// Register default NativeScript components
// Note: ActionBar related components are registerd together with action-bar directives.
registerElement('AbsoluteLayout', () => AbsoluteLayout);
registerElement('ActivityIndicator', () => ActivityIndicator);
registerElement('BottomNavigation', () => BottomNavigation);
registerElement('Button', () => Button);
registerElement('ContentView', () => ContentView);
registerElement('DatePicker', () => DatePicker);
registerElement('DockLayout', () => DockLayout);
registerElement('Frame', () => Frame, frameMeta);
registerElement('GridLayout', () => GridLayout);
registerElement('HtmlView', () => HtmlView);
registerElement('Image', () => Image);
// Parse5 changes <Image> tags to <img>. WTF!
registerElement('img', () => Image);
registerElement('Label', () => Label);
registerElement('ListPicker', () => ListPicker);
registerElement('ListView', () => ListView);
registerElement('Page', () => Page);
registerElement('Placeholder', () => Placeholder);
registerElement('Progress', () => Progress);
registerElement('ProxyViewContainer', () => ProxyViewContainer);
registerElement('Repeater', () => Repeater);
registerElement('ScrollView', () => ScrollView);
registerElement('SearchBar', () => SearchBar);
registerElement('SegmentedBar', () => SegmentedBar);
registerElement('SegmentedBarItem', () => SegmentedBarItem);
registerElement('Slider', () => Slider);
registerElement('StackLayout', () => StackLayout);
registerElement('FlexboxLayout', () => FlexboxLayout);
registerElement('Switch', () => Switch);
registerElement('TabView', () => TabView);
registerElement('TabStrip', () => TabStrip);
registerElement('TabStripItem', () => TabStripItem);
registerElement('TabContentItem', () => TabContentItem);
registerElement('Tabs', () => Tabs);
registerElement('TextField', () => TextField);
registerElement('TextView', () => TextView);
registerElement('TimePicker', () => TimePicker);
registerElement('WebView', () => WebView);
registerElement('WrapLayout', () => WrapLayout);
registerElement('FormattedString', () => FormattedString);
registerElement('Span', () => Span);
registerElement('DetachedContainer', () => ProxyViewContainer, {
    skipAddToDom: true,
});
registerElement('page-router-outlet', () => Frame);
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,