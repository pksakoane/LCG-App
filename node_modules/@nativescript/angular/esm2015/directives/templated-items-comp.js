import { __decorate } from "tslib";
import { ContentChild, Directive, ElementRef, EventEmitter, Host, Inject, InjectionToken, Input, IterableDiffers, Output, TemplateRef, ViewChild, ViewContainerRef, ÉµisListLikeIterable as isListLikeIterable, NgZone } from '@angular/core';
import { ObservableArray, LayoutBase, profile } from '@nativescript/core';
import { getSingleViewRecursive } from '../element-registry';
import { NativeScriptDebug } from '../trace';
const NG_VIEW = '_ngViewRef';
export class ItemContext {
    constructor($implicit, item, index, even, odd) {
        this.$implicit = $implicit;
        this.item = item;
        this.index = index;
        this.even = even;
        this.odd = odd;
    }
}
export class TemplatedItemsComponent {
    constructor(_elementRef, _iterableDiffers, zone) {
        this._iterableDiffers = _iterableDiffers;
        this.zone = zone;
        this.setupItemView = new EventEmitter();
        this.templatedItemsView = _elementRef.nativeElement;
        this.templatedItemsView.on('itemLoading', this.onItemLoading, this);
    }
    get items() {
        return this._items;
    }
    set items(value) {
        this._items = value;
        let needDiffer = true;
        if (value instanceof ObservableArray) {
            needDiffer = false;
        }
        if (needDiffer && !this._differ && isListLikeIterable(value)) {
            this._differ = this._iterableDiffers.find(this._items).create((_index, item) => {
                return item;
            });
        }
        this.templatedItemsView.items = this._items;
    }
    ngAfterContentInit() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog('TemplatedItemsView.ngAfterContentInit()');
        }
        this.setItemTemplates();
    }
    ngOnDestroy() {
        this.templatedItemsView.off('itemLoading', this.onItemLoading, this);
        this.templatedItemsView = null;
        if (this._templateMap) {
            this._templateMap.clear();
        }
    }
    setItemTemplates() {
        // The itemTemplateQuery may be changed after list items are added that contain <template> inside,
        // so cache and use only the original template to avoid errors.
        this.itemTemplate = this.itemTemplateQuery;
        if (this._templateMap) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog('Setting templates');
            }
            const templates = [];
            this._templateMap.forEach((value) => {
                templates.push(value);
            });
            this.templatedItemsView.itemTemplates = templates;
        }
    }
    registerTemplate(key, template) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog(`registerTemplate for key: ${key}`);
        }
        if (!this._templateMap) {
            this._templateMap = new Map();
        }
        const keyedTemplate = {
            key,
            createView: this.getItemTemplateViewFactory(template),
        };
        this._templateMap.set(key, keyedTemplate);
    }
    onItemLoading(args) {
        if (!args.view && !this.itemTemplate) {
            return;
        }
        const index = args.index;
        const items = args.object.items;
        const currentItem = typeof items.getItem === 'function' ? items.getItem(index) : items[index];
        let viewRef;
        if (args.view) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog(`onItemLoading: ${index} - Reusing existing view`);
            }
            viewRef = args.view[NG_VIEW];
            // Getting angular view from original element (in cases when ProxyViewContainer
            // is used NativeScript internally wraps it in a StackLayout)
            if (!viewRef && args.view instanceof LayoutBase && args.view.getChildrenCount() > 0) {
                viewRef = args.view.getChildAt(0)[NG_VIEW];
            }
            if (!viewRef && NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewError(`ViewReference not found for item ${index}. View recycling is not working`);
            }
            // No ng-template is setup, continue with 'defaultTemplate'
            if (!viewRef) {
                return;
            }
        }
        if (!viewRef) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog(`onItemLoading: ${index} - Creating view from template`);
            }
            viewRef = this.loader.createEmbeddedView(this.itemTemplate, new ItemContext(), 0);
            args.view = getItemViewRoot(viewRef);
            args.view[NG_VIEW] = viewRef;
        }
        this.setupViewRef(viewRef, currentItem, index);
        this.detectChangesOnChild(viewRef, index);
    }
    setupViewRef(viewRef, data, index) {
        const context = viewRef.context;
        context.$implicit = data;
        context.item = data;
        context.index = index;
        context.even = index % 2 === 0;
        context.odd = !context.even;
        this.setupItemView.next({ view: viewRef, data: data, index: index, context: context });
    }
    getItemTemplateViewFactory(template) {
        return () => {
            const viewRef = this.loader.createEmbeddedView(template, new ItemContext(), 0);
            const resultView = getItemViewRoot(viewRef);
            resultView[NG_VIEW] = viewRef;
            return resultView;
        };
    }
    detectChangesOnChild(viewRef, index) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.listViewLog(`Manually detect changes in child: ${index}`);
        }
        this.zone.run(() => {
            viewRef.markForCheck();
            viewRef.detectChanges();
        });
    }
    ngDoCheck() {
        if (this._differ) {
            if (NativeScriptDebug.isLogEnabled()) {
                NativeScriptDebug.listViewLog('ngDoCheck() - execute differ');
            }
            const changes = this._differ.diff(this._items);
            if (changes) {
                if (NativeScriptDebug.isLogEnabled()) {
                    NativeScriptDebug.listViewLog('ngDoCheck() - refresh');
                }
                this.templatedItemsView.refresh();
            }
        }
    }
}
TemplatedItemsComponent.decorators = [
    { type: Directive }
];
TemplatedItemsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers },
    { type: NgZone }
];
TemplatedItemsComponent.propDecorators = {
    loader: [{ type: ViewChild, args: ['loader', { read: ViewContainerRef, static: false },] }],
    setupItemView: [{ type: Output }],
    itemTemplateQuery: [{ type: ContentChild, args: [TemplateRef, { read: TemplateRef, static: false },] }],
    items: [{ type: Input }]
};
__decorate([
    profile
], TemplatedItemsComponent.prototype, "onItemLoading", null);
__decorate([
    profile
], TemplatedItemsComponent.prototype, "detectChangesOnChild", null);
export function getItemViewRoot(viewRef, rootLocator = getSingleViewRecursive) {
    const rootView = rootLocator(viewRef.rootNodes, 0);
    return rootView;
}
export const TEMPLATED_ITEMS_COMPONENT = new InjectionToken('TemplatedItemsComponent');
export class TemplateKeyDirective {
    constructor(templateRef, comp) {
        this.templateRef = templateRef;
        this.comp = comp;
    }
    set nsTemplateKey(value) {
        if (this.comp && this.templateRef) {
            this.comp.registerTemplate(value, this.templateRef);
        }
    }
}
TemplateKeyDirective.decorators = [
    { type: Directive, args: [{ selector: '[nsTemplateKey]' },] }
];
TemplateKeyDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: TemplatedItemsComponent, decorators: [{ type: Inject, args: [TEMPLATED_ITEMS_COMPONENT,] }, { type: Host }] }
];
TemplateKeyDirective.propDecorators = {
    nsTemplateKey: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,