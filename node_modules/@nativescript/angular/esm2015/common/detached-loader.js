import { ViewContainerRef, Component, ComponentFactoryResolver, ChangeDetectorRef, ApplicationRef } from '@angular/core';
import { Trace } from '@nativescript/core';
/**
 * Wrapper component used for loading components when navigating
 * It uses DetachedContainer as selector so that it is containerRef is not attached to
 * the visual tree.
 */
export class DetachedLoader {
    // tslint:disable-line:component-class-suffix
    constructor(resolver, changeDetector, containerRef, appRef) {
        this.resolver = resolver;
        this.changeDetector = changeDetector;
        this.containerRef = containerRef;
        this.appRef = appRef;
        this.disposeFunctions = [];
    }
    loadInLocation(componentType) {
        const factory = this.resolver.resolveComponentFactory(componentType);
        const componentRef = factory.create(this.containerRef.injector);
        this.appRef.attachView(componentRef.hostView);
        this.disposeFunctions.push(() => {
            this.appRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        // Component is created, built may not be checked if we are loading
        // inside component with OnPush CD strategy. Mark us for check to be sure CD will reach us.
        // We are inside a promise here so no need for setTimeout - CD should trigger
        // after the promise.
        Trace.write('DetachedLoader.loadInLocation component loaded -> markForCheck', 'detached-loader');
        return Promise.resolve(componentRef);
    }
    ngOnDestroy() {
        this.disposeFunctions.forEach((fn) => fn());
    }
    detectChanges() {
        this.changeDetector.markForCheck();
    }
    // TODO: change this API -- async promises not needed here anymore.
    loadComponent(componentType) {
        Trace.write('DetachedLoader.loadComponent', 'detached-loader');
        return this.loadInLocation(componentType);
    }
    loadWithFactory(factory) {
        const componentRef = factory.create(this.containerRef.injector);
        this.appRef.attachView(componentRef.hostView);
        this.disposeFunctions.push(() => {
            this.appRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        return componentRef;
    }
}
DetachedLoader.decorators = [
    { type: Component, args: [{
                selector: 'DetachedContainer',
                template: `<Placeholder #loader></Placeholder>`
            },] }
];
DetachedLoader.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: ViewContainerRef },
    { type: ApplicationRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWNoZWQtbG9hZGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLyIsInNvdXJjZXMiOlsiY29tbW9uL2RldGFjaGVkLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWtDLGdCQUFnQixFQUFFLFNBQVMsRUFBUSx3QkFBd0IsRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDMUssT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTNDOzs7O0dBSUc7QUFLSCxNQUFNLE9BQU8sY0FBYztJQUUxQiw2Q0FBNkM7SUFDN0MsWUFBb0IsUUFBa0MsRUFBVSxjQUFpQyxFQUFVLFlBQThCLEVBQVUsTUFBc0I7UUFBckosYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUZqSyxxQkFBZ0IsR0FBc0IsRUFBRSxDQUFDO0lBRTJILENBQUM7SUFFckssY0FBYyxDQUFDLGFBQXdCO1FBQzlDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckUsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsbUVBQW1FO1FBQ25FLDJGQUEyRjtRQUMzRiw2RUFBNkU7UUFDN0UscUJBQXFCO1FBQ3JCLEtBQUssQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUVqRyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLFdBQVc7UUFDakIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sYUFBYTtRQUNuQixJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxtRUFBbUU7SUFDNUQsYUFBYSxDQUFDLGFBQXdCO1FBQzVDLEtBQUssQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUMvRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLGVBQWUsQ0FBSSxPQUE0QjtRQUNyRCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDOzs7WUFuREQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRSxxQ0FBcUM7YUFDL0M7OztZQVgyRSx3QkFBd0I7WUFBRSxpQkFBaUI7WUFBOUUsZ0JBQWdCO1lBQWdFLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIENvbXBvbmVudEZhY3RvcnksIFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudCwgVHlwZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDaGFuZ2VEZXRlY3RvclJlZiwgQXBwbGljYXRpb25SZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhY2UgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG4vKipcbiAqIFdyYXBwZXIgY29tcG9uZW50IHVzZWQgZm9yIGxvYWRpbmcgY29tcG9uZW50cyB3aGVuIG5hdmlnYXRpbmdcbiAqIEl0IHVzZXMgRGV0YWNoZWRDb250YWluZXIgYXMgc2VsZWN0b3Igc28gdGhhdCBpdCBpcyBjb250YWluZXJSZWYgaXMgbm90IGF0dGFjaGVkIHRvXG4gKiB0aGUgdmlzdWFsIHRyZWUuXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ0RldGFjaGVkQ29udGFpbmVyJyxcblx0dGVtcGxhdGU6IGA8UGxhY2Vob2xkZXIgI2xvYWRlcj48L1BsYWNlaG9sZGVyPmAsXG59KVxuZXhwb3J0IGNsYXNzIERldGFjaGVkTG9hZGVyIGltcGxlbWVudHMgT25EZXN0cm95IHtcblx0cHJpdmF0ZSBkaXNwb3NlRnVuY3Rpb25zOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuXHQvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOmNvbXBvbmVudC1jbGFzcy1zdWZmaXhcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBjb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZikge31cblxuXHRwcml2YXRlIGxvYWRJbkxvY2F0aW9uKGNvbXBvbmVudFR5cGU6IFR5cGU8YW55Pik6IFByb21pc2U8Q29tcG9uZW50UmVmPGFueT4+IHtcblx0XHRjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnRUeXBlKTtcblx0XHRjb25zdCBjb21wb25lbnRSZWYgPSBmYWN0b3J5LmNyZWF0ZSh0aGlzLmNvbnRhaW5lclJlZi5pbmplY3Rvcik7XG5cdFx0dGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXG5cdFx0dGhpcy5kaXNwb3NlRnVuY3Rpb25zLnB1c2goKCkgPT4ge1xuXHRcdFx0dGhpcy5hcHBSZWYuZGV0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXHRcdFx0Y29tcG9uZW50UmVmLmRlc3Ryb3koKTtcblx0XHR9KTtcblxuXHRcdC8vIENvbXBvbmVudCBpcyBjcmVhdGVkLCBidWlsdCBtYXkgbm90IGJlIGNoZWNrZWQgaWYgd2UgYXJlIGxvYWRpbmdcblx0XHQvLyBpbnNpZGUgY29tcG9uZW50IHdpdGggT25QdXNoIENEIHN0cmF0ZWd5LiBNYXJrIHVzIGZvciBjaGVjayB0byBiZSBzdXJlIENEIHdpbGwgcmVhY2ggdXMuXG5cdFx0Ly8gV2UgYXJlIGluc2lkZSBhIHByb21pc2UgaGVyZSBzbyBubyBuZWVkIGZvciBzZXRUaW1lb3V0IC0gQ0Qgc2hvdWxkIHRyaWdnZXJcblx0XHQvLyBhZnRlciB0aGUgcHJvbWlzZS5cblx0XHRUcmFjZS53cml0ZSgnRGV0YWNoZWRMb2FkZXIubG9hZEluTG9jYXRpb24gY29tcG9uZW50IGxvYWRlZCAtPiBtYXJrRm9yQ2hlY2snLCAnZGV0YWNoZWQtbG9hZGVyJyk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbXBvbmVudFJlZik7XG5cdH1cblxuXHRwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG5cdFx0dGhpcy5kaXNwb3NlRnVuY3Rpb25zLmZvckVhY2goKGZuKSA9PiBmbigpKTtcblx0fVxuXG5cdHB1YmxpYyBkZXRlY3RDaGFuZ2VzKCkge1xuXHRcdHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XG5cdH1cblxuXHQvLyBUT0RPOiBjaGFuZ2UgdGhpcyBBUEkgLS0gYXN5bmMgcHJvbWlzZXMgbm90IG5lZWRlZCBoZXJlIGFueW1vcmUuXG5cdHB1YmxpYyBsb2FkQ29tcG9uZW50KGNvbXBvbmVudFR5cGU6IFR5cGU8YW55Pik6IFByb21pc2U8Q29tcG9uZW50UmVmPGFueT4+IHtcblx0XHRUcmFjZS53cml0ZSgnRGV0YWNoZWRMb2FkZXIubG9hZENvbXBvbmVudCcsICdkZXRhY2hlZC1sb2FkZXInKTtcblx0XHRyZXR1cm4gdGhpcy5sb2FkSW5Mb2NhdGlvbihjb21wb25lbnRUeXBlKTtcblx0fVxuXG5cdHB1YmxpYyBsb2FkV2l0aEZhY3Rvcnk8VD4oZmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxUPik6IENvbXBvbmVudFJlZjxUPiB7XG5cdFx0Y29uc3QgY29tcG9uZW50UmVmID0gZmFjdG9yeS5jcmVhdGUodGhpcy5jb250YWluZXJSZWYuaW5qZWN0b3IpO1xuXHRcdHRoaXMuYXBwUmVmLmF0dGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcblxuXHRcdHRoaXMuZGlzcG9zZUZ1bmN0aW9ucy5wdXNoKCgpID0+IHtcblx0XHRcdHRoaXMuYXBwUmVmLmRldGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcblx0XHRcdGNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGNvbXBvbmVudFJlZjtcblx0fVxufVxuIl19