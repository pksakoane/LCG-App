import { __decorate } from "tslib";
import { Injectable, NgZone, Renderer2 } from '@angular/core';
import { View, getViewById, profile } from '@nativescript/core';
import { ViewUtil } from './view-util';
import { NativeScriptDebug } from './trace';
export class NativeScriptRenderer extends Renderer2 {
    constructor(rootView, zone, viewUtil) {
        super();
        this.rootView = rootView;
        this.zone = zone;
        this.viewUtil = viewUtil;
        this.data = Object.create(null);
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer created');
        }
    }
    appendChild(parent, newChild) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.appendChild child: ${newChild} parent: ${parent}`);
        }
        this.viewUtil.insertChild(parent, newChild);
    }
    insertBefore(parent, newChild, refChild) {
        let { previous, next } = refChild instanceof View ? { previous: refChild.previousSibling, next: refChild } : { previous: null, next: null };
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.insertBefore child: ${newChild} ` + `parent: ${parent} previous: ${previous} next: ${next}`);
        }
        this.viewUtil.insertChild(parent, newChild, previous, next);
    }
    removeChild(parent, oldChild) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeChild child: ${oldChild} parent: ${parent}`);
        }
        this.viewUtil.removeChild(parent, oldChild);
    }
    selectRootElement(selector) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.selectRootElement: ${selector}`);
        }
        if (selector && selector[0] === '#') {
            const result = getViewById(this.rootView, selector.slice(1));
            return (result || this.rootView);
        }
        return this.rootView;
    }
    parentNode(node) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.parentNode for node: ${node} is ${node.parentNode}`);
        }
        return node.parentNode;
    }
    nextSibling(node) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.nextSibling of ${node} is ${node.nextSibling}`);
        }
        return node.nextSibling;
    }
    createComment(_value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createComment ${_value}`);
        }
        return this.viewUtil.createComment();
    }
    createElement(name, _namespace) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createElement: ${name}`);
        }
        return this.viewUtil.createView(name);
    }
    createText(_value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createText ${_value}`);
        }
        return this.viewUtil.createText();
    }
    createViewRoot(hostElement) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.createViewRoot ${hostElement.nodeName}`);
        }
        return hostElement;
    }
    projectNodes(parentElement, nodes) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.projectNodes');
        }
        nodes.forEach((node) => this.viewUtil.insertChild(parentElement, node));
    }
    destroy() {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.destroy');
        }
        // Seems to be called on component dispose only (router outlet)
        // TODO: handle this when we resolve routing and navigation.
    }
    setAttribute(view, name, value, namespace) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setAttribute ${view} : ${name} = ${value}, namespace: ${namespace}`);
        }
        return this.viewUtil.setProperty(view, name, value, namespace);
    }
    removeAttribute(_el, _name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeAttribute ${_el}: ${_name}`);
        }
    }
    setProperty(view, name, value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setProperty ${view} : ${name} = ${value}`);
        }
        return this.viewUtil.setProperty(view, name, value);
    }
    addClass(view, name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.addClass ${name}`);
        }
        this.viewUtil.addClass(view, name);
    }
    removeClass(view, name) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.removeClass ${name}`);
        }
        this.viewUtil.removeClass(view, name);
    }
    setStyle(view, styleName, value, _flags) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setStyle: ${styleName} = ${value}`);
        }
        this.viewUtil.setStyle(view, styleName, value);
    }
    removeStyle(view, styleName, _flags) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog('NativeScriptRenderer.removeStyle: ${styleName}');
        }
        this.viewUtil.removeStyle(view, styleName);
    }
    // Used only in debug mode to serialize property changes to comment nodes,
    // such as <template> placeholders.
    setBindingDebugInfo(renderElement, propertyName, propertyValue) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setBindingDebugInfo: ${renderElement}, ${propertyName} = ${propertyValue}`);
        }
    }
    setElementDebugInfo(renderElement, _info /*RenderDebugInfo*/) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setElementDebugInfo: ${renderElement}`);
        }
    }
    invokeElementMethod(_renderElement, methodName, args) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.invokeElementMethod ${methodName} ${args}`);
        }
    }
    setValue(_renderNode, _value) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.setValue renderNode: ${_renderNode}, value: ${_value}`);
        }
    }
    listen(renderElement, eventName, callback) {
        if (NativeScriptDebug.isLogEnabled()) {
            NativeScriptDebug.rendererLog(`NativeScriptRenderer.listen: ${eventName}`);
        }
        // Explicitly wrap in zone
        let zonedCallback = (...args) => {
            this.zone.run(() => {
                callback.apply(undefined, args);
            });
        };
        renderElement.on(eventName, zonedCallback);
        if (eventName === View.loadedEvent && renderElement.isLoaded) {
            const notifyData = { eventName: View.loadedEvent, object: renderElement };
            zonedCallback(notifyData);
        }
        return () => renderElement.off(eventName, zonedCallback);
    }
}
NativeScriptRenderer.decorators = [
    { type: Injectable }
];
NativeScriptRenderer.ctorParameters = () => [
    { type: undefined },
    { type: NgZone },
    { type: ViewUtil }
];
__decorate([
    profile
], NativeScriptRenderer.prototype, "appendChild", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "insertBefore", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeChild", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "selectRootElement", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "parentNode", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "nextSibling", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createComment", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createElement", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createText", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "createViewRoot", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "projectNodes", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "destroy", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setAttribute", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeAttribute", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setProperty", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "addClass", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeClass", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setStyle", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "removeStyle", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setBindingDebugInfo", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setElementDebugInfo", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "invokeElementMethod", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "setValue", null);
__decorate([
    profile
], NativeScriptRenderer.prototype, "listen", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vIiwic291cmNlcyI6WyJyZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFVLFVBQVUsRUFBWSxNQUFNLEVBQUUsU0FBUyxFQUEyRSxNQUFNLGVBQWUsQ0FBQztBQUV6SixPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUc1QyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsU0FBUztJQUdsRCxZQUFvQixRQUFnQixFQUFVLElBQVksRUFBVSxRQUFrQjtRQUNyRixLQUFLLEVBQUUsQ0FBQztRQURXLGFBQVEsR0FBUixRQUFRLENBQVE7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUZ0RixTQUFJLEdBQTJCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFJbEQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUM5RDtJQUNGLENBQUM7SUFHRCxXQUFXLENBQUMsTUFBYyxFQUFFLFFBQWdCO1FBQzNDLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLDJDQUEyQyxRQUFRLFlBQVksTUFBTSxFQUFFLENBQUMsQ0FBQztTQUN2RztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBR0QsWUFBWSxDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLFFBQWdCO1FBQzlELElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDNUksSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsNENBQTRDLFFBQVEsR0FBRyxHQUFHLFdBQVcsTUFBTSxjQUFjLFFBQVEsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2pKO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUdELFdBQVcsQ0FBQyxNQUFXLEVBQUUsUUFBZ0I7UUFDeEMsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsMkNBQTJDLFFBQVEsWUFBWSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZHO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFHRCxpQkFBaUIsQ0FBQyxRQUFnQjtRQUNqQyxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQywyQ0FBMkMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUNyRjtRQUNELElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDcEMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdELE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBVyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3RCLENBQUM7SUFHRCxVQUFVLENBQUMsSUFBWTtRQUN0QixJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyw2Q0FBNkMsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pHO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3hCLENBQUM7SUFHRCxXQUFXLENBQUMsSUFBWTtRQUN2QixJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyx1Q0FBdUMsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ3BHO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3pCLENBQUM7SUFHRCxhQUFhLENBQUMsTUFBVztRQUN4QixJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxzQ0FBc0MsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM5RTtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBR0QsYUFBYSxDQUFDLElBQVMsRUFBRSxVQUFrQjtRQUMxQyxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyx1Q0FBdUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUM3RTtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUdELFVBQVUsQ0FBQyxNQUFjO1FBQ3hCLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLG1DQUFtQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFHRCxjQUFjLENBQUMsV0FBbUI7UUFDakMsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsdUNBQXVDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDcEIsQ0FBQztJQUdELFlBQVksQ0FBQyxhQUFxQixFQUFFLEtBQWU7UUFDbEQsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUNuRTtRQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFHRCxPQUFPO1FBQ04sSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUM5RDtRQUNELCtEQUErRDtRQUMvRCw0REFBNEQ7SUFDN0QsQ0FBQztJQUdELFlBQVksQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxTQUFrQjtRQUN6RSxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxxQ0FBcUMsSUFBSSxNQUFNLElBQUksTUFBTSxLQUFLLGdCQUFnQixTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQ3pIO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBR0QsZUFBZSxDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQ3pDLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLHdDQUF3QyxHQUFHLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQztTQUN2RjtJQUNGLENBQUM7SUFHRCxXQUFXLENBQUMsSUFBUyxFQUFFLElBQVksRUFBRSxLQUFVO1FBQzlDLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLG9DQUFvQyxJQUFJLE1BQU0sSUFBSSxNQUFNLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDL0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUdELFFBQVEsQ0FBQyxJQUFZLEVBQUUsSUFBWTtRQUNsQyxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxpQ0FBaUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN2RTtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBR0QsV0FBVyxDQUFDLElBQVksRUFBRSxJQUFZO1FBQ3JDLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLG9DQUFvQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFHRCxRQUFRLENBQUMsSUFBWSxFQUFFLFNBQWlCLEVBQUUsS0FBVSxFQUFFLE1BQTRCO1FBQ2pGLElBQUksaUJBQWlCLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLGtDQUFrQyxTQUFTLE1BQU0sS0FBSyxFQUFFLENBQUMsQ0FBQztTQUN4RjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUdELFdBQVcsQ0FBQyxJQUFZLEVBQUUsU0FBaUIsRUFBRSxNQUE0QjtRQUN4RSxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCwwRUFBMEU7SUFDMUUsbUNBQW1DO0lBRW5DLG1CQUFtQixDQUFDLGFBQXFCLEVBQUUsWUFBb0IsRUFBRSxhQUFxQjtRQUNyRixJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyw2Q0FBNkMsYUFBYSxLQUFLLFlBQVksTUFBTSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1NBQ2hJO0lBQ0YsQ0FBQztJQUdELG1CQUFtQixDQUFDLGFBQWtCLEVBQUUsS0FBVSxDQUFDLG1CQUFtQjtRQUNyRSxJQUFJLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3JDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyw2Q0FBNkMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUM1RjtJQUNGLENBQUM7SUFHRCxtQkFBbUIsQ0FBQyxjQUFzQixFQUFFLFVBQWtCLEVBQUUsSUFBZ0I7UUFDL0UsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsNENBQTRDLFVBQVUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hHO0lBQ0YsQ0FBQztJQUdELFFBQVEsQ0FBQyxXQUFnQixFQUFFLE1BQWM7UUFDeEMsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsNkNBQTZDLFdBQVcsWUFBWSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQzVHO0lBQ0YsQ0FBQztJQUdELE1BQU0sQ0FBQyxhQUFrQixFQUFFLFNBQWlCLEVBQUUsUUFBaUM7UUFDOUUsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsZ0NBQWdDLFNBQVMsRUFBRSxDQUFDLENBQUM7U0FDM0U7UUFDRCwwQkFBMEI7UUFDMUIsSUFBSSxhQUFhLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDbEIsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUM7UUFFRixhQUFhLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUMzQyxJQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsV0FBVyxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUU7WUFDN0QsTUFBTSxVQUFVLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLENBQUM7WUFDMUUsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7WUF6TkQsVUFBVTs7OztZQVI0QixNQUFNO1lBSXBDLFFBQVE7O0FBZ0JoQjtJQURDLE9BQU87dURBTVA7QUFHRDtJQURDLE9BQU87d0RBT1A7QUFHRDtJQURDLE9BQU87dURBTVA7QUFHRDtJQURDLE9BQU87NkRBVVA7QUFHRDtJQURDLE9BQU87c0RBTVA7QUFHRDtJQURDLE9BQU87dURBT1A7QUFHRDtJQURDLE9BQU87eURBTVA7QUFHRDtJQURDLE9BQU87eURBTVA7QUFHRDtJQURDLE9BQU87c0RBTVA7QUFHRDtJQURDLE9BQU87MERBTVA7QUFHRDtJQURDLE9BQU87d0RBTVA7QUFHRDtJQURDLE9BQU87bURBT1A7QUFHRDtJQURDLE9BQU87d0RBTVA7QUFHRDtJQURDLE9BQU87MkRBS1A7QUFHRDtJQURDLE9BQU87dURBTVA7QUFHRDtJQURDLE9BQU87b0RBTVA7QUFHRDtJQURDLE9BQU87dURBTVA7QUFHRDtJQURDLE9BQU87b0RBTVA7QUFHRDtJQURDLE9BQU87dURBTVA7QUFLRDtJQURDLE9BQU87K0RBS1A7QUFHRDtJQURDLE9BQU87K0RBS1A7QUFHRDtJQURDLE9BQU87K0RBS1A7QUFHRDtJQURDLE9BQU87b0RBS1A7QUFHRDtJQURDLE9BQU87a0RBa0JQIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCwgTmdab25lLCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIsIFJlbmRlcmVyVHlwZTIsIFJlbmRlcmVyU3R5bGVGbGFnczIsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFZpZXcsIGdldFZpZXdCeUlkLCBwcm9maWxlIH0gZnJvbSAnQG5hdGl2ZXNjcmlwdC9jb3JlJztcblxuaW1wb3J0IHsgVmlld1V0aWwgfSBmcm9tICcuL3ZpZXctdXRpbCc7XG5pbXBvcnQgeyBOZ1ZpZXcsIEludmlzaWJsZU5vZGUgfSBmcm9tICcuL2VsZW1lbnQtcmVnaXN0cnknO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGVidWcgfSBmcm9tICcuL3RyYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdFJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIyIHtcblx0ZGF0YTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByb290VmlldzogTmdWaWV3LCBwcml2YXRlIHpvbmU6IE5nWm9uZSwgcHJpdmF0ZSB2aWV3VXRpbDogVmlld1V0aWwpIHtcblx0XHRzdXBlcigpO1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coJ05hdGl2ZVNjcmlwdFJlbmRlcmVyIGNyZWF0ZWQnKTtcblx0XHR9XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRhcHBlbmRDaGlsZChwYXJlbnQ6IE5nVmlldywgbmV3Q2hpbGQ6IE5nVmlldyk6IHZvaWQge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLmFwcGVuZENoaWxkIGNoaWxkOiAke25ld0NoaWxkfSBwYXJlbnQ6ICR7cGFyZW50fWApO1xuXHRcdH1cblx0XHR0aGlzLnZpZXdVdGlsLmluc2VydENoaWxkKHBhcmVudCwgbmV3Q2hpbGQpO1xuXHR9XG5cblx0QHByb2ZpbGVcblx0aW5zZXJ0QmVmb3JlKHBhcmVudDogTmdWaWV3LCBuZXdDaGlsZDogTmdWaWV3LCByZWZDaGlsZDogTmdWaWV3KTogdm9pZCB7XG5cdFx0bGV0IHsgcHJldmlvdXMsIG5leHQgfSA9IHJlZkNoaWxkIGluc3RhbmNlb2YgVmlldyA/IHsgcHJldmlvdXM6IHJlZkNoaWxkLnByZXZpb3VzU2libGluZywgbmV4dDogcmVmQ2hpbGQgfSA6IHsgcHJldmlvdXM6IG51bGwsIG5leHQ6IG51bGwgfTtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyTG9nKGBOYXRpdmVTY3JpcHRSZW5kZXJlci5pbnNlcnRCZWZvcmUgY2hpbGQ6ICR7bmV3Q2hpbGR9IGAgKyBgcGFyZW50OiAke3BhcmVudH0gcHJldmlvdXM6ICR7cHJldmlvdXN9IG5leHQ6ICR7bmV4dH1gKTtcblx0XHR9XG5cdFx0dGhpcy52aWV3VXRpbC5pbnNlcnRDaGlsZChwYXJlbnQsIG5ld0NoaWxkLCBwcmV2aW91cywgbmV4dCk7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRyZW1vdmVDaGlsZChwYXJlbnQ6IGFueSwgb2xkQ2hpbGQ6IE5nVmlldyk6IHZvaWQge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLnJlbW92ZUNoaWxkIGNoaWxkOiAke29sZENoaWxkfSBwYXJlbnQ6ICR7cGFyZW50fWApO1xuXHRcdH1cblx0XHR0aGlzLnZpZXdVdGlsLnJlbW92ZUNoaWxkKHBhcmVudCwgb2xkQ2hpbGQpO1xuXHR9XG5cblx0QHByb2ZpbGVcblx0c2VsZWN0Um9vdEVsZW1lbnQoc2VsZWN0b3I6IHN0cmluZyk6IE5nVmlldyB7XG5cdFx0aWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG5cdFx0XHROYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlckxvZyhgTmF0aXZlU2NyaXB0UmVuZGVyZXIuc2VsZWN0Um9vdEVsZW1lbnQ6ICR7c2VsZWN0b3J9YCk7XG5cdFx0fVxuXHRcdGlmIChzZWxlY3RvciAmJiBzZWxlY3RvclswXSA9PT0gJyMnKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBnZXRWaWV3QnlJZCh0aGlzLnJvb3RWaWV3LCBzZWxlY3Rvci5zbGljZSgxKSk7XG5cdFx0XHRyZXR1cm4gKHJlc3VsdCB8fCB0aGlzLnJvb3RWaWV3KSBhcyBOZ1ZpZXc7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnJvb3RWaWV3O1xuXHR9XG5cblx0QHByb2ZpbGVcblx0cGFyZW50Tm9kZShub2RlOiBOZ1ZpZXcpOiBhbnkge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLnBhcmVudE5vZGUgZm9yIG5vZGU6ICR7bm9kZX0gaXMgJHtub2RlLnBhcmVudE5vZGV9YCk7XG5cdFx0fVxuXHRcdHJldHVybiBub2RlLnBhcmVudE5vZGU7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRuZXh0U2libGluZyhub2RlOiBOZ1ZpZXcpOiBOZ1ZpZXcge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLm5leHRTaWJsaW5nIG9mICR7bm9kZX0gaXMgJHtub2RlLm5leHRTaWJsaW5nfWApO1xuXHRcdH1cblxuXHRcdHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuXHR9XG5cblx0QHByb2ZpbGVcblx0Y3JlYXRlQ29tbWVudChfdmFsdWU6IGFueSk6IEludmlzaWJsZU5vZGUge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLmNyZWF0ZUNvbW1lbnQgJHtfdmFsdWV9YCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnZpZXdVdGlsLmNyZWF0ZUNvbW1lbnQoKTtcblx0fVxuXG5cdEBwcm9maWxlXG5cdGNyZWF0ZUVsZW1lbnQobmFtZTogYW55LCBfbmFtZXNwYWNlOiBzdHJpbmcpOiBOZ1ZpZXcge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQ6ICR7bmFtZX1gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMudmlld1V0aWwuY3JlYXRlVmlldyhuYW1lKTtcblx0fVxuXG5cdEBwcm9maWxlXG5cdGNyZWF0ZVRleHQoX3ZhbHVlOiBzdHJpbmcpOiBJbnZpc2libGVOb2RlIHtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyTG9nKGBOYXRpdmVTY3JpcHRSZW5kZXJlci5jcmVhdGVUZXh0ICR7X3ZhbHVlfWApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3VXRpbC5jcmVhdGVUZXh0KCk7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRjcmVhdGVWaWV3Um9vdChob3N0RWxlbWVudDogTmdWaWV3KTogTmdWaWV3IHtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyTG9nKGBOYXRpdmVTY3JpcHRSZW5kZXJlci5jcmVhdGVWaWV3Um9vdCAke2hvc3RFbGVtZW50Lm5vZGVOYW1lfWApO1xuXHRcdH1cblx0XHRyZXR1cm4gaG9zdEVsZW1lbnQ7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRwcm9qZWN0Tm9kZXMocGFyZW50RWxlbWVudDogTmdWaWV3LCBub2RlczogTmdWaWV3W10pOiB2b2lkIHtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyTG9nKCdOYXRpdmVTY3JpcHRSZW5kZXJlci5wcm9qZWN0Tm9kZXMnKTtcblx0XHR9XG5cdFx0bm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gdGhpcy52aWV3VXRpbC5pbnNlcnRDaGlsZChwYXJlbnRFbGVtZW50LCBub2RlKSk7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRkZXN0cm95KCkge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coJ05hdGl2ZVNjcmlwdFJlbmRlcmVyLmRlc3Ryb3knKTtcblx0XHR9XG5cdFx0Ly8gU2VlbXMgdG8gYmUgY2FsbGVkIG9uIGNvbXBvbmVudCBkaXNwb3NlIG9ubHkgKHJvdXRlciBvdXRsZXQpXG5cdFx0Ly8gVE9ETzogaGFuZGxlIHRoaXMgd2hlbiB3ZSByZXNvbHZlIHJvdXRpbmcgYW5kIG5hdmlnYXRpb24uXG5cdH1cblxuXHRAcHJvZmlsZVxuXHRzZXRBdHRyaWJ1dGUodmlldzogTmdWaWV3LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG5hbWVzcGFjZT86IHN0cmluZykge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLnNldEF0dHJpYnV0ZSAke3ZpZXd9IDogJHtuYW1lfSA9ICR7dmFsdWV9LCBuYW1lc3BhY2U6ICR7bmFtZXNwYWNlfWApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy52aWV3VXRpbC5zZXRQcm9wZXJ0eSh2aWV3LCBuYW1lLCB2YWx1ZSwgbmFtZXNwYWNlKTtcblx0fVxuXG5cdEBwcm9maWxlXG5cdHJlbW92ZUF0dHJpYnV0ZShfZWw6IE5nVmlldywgX25hbWU6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSAke19lbH06ICR7X25hbWV9YCk7XG5cdFx0fVxuXHR9XG5cblx0QHByb2ZpbGVcblx0c2V0UHJvcGVydHkodmlldzogYW55LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyTG9nKGBOYXRpdmVTY3JpcHRSZW5kZXJlci5zZXRQcm9wZXJ0eSAke3ZpZXd9IDogJHtuYW1lfSA9ICR7dmFsdWV9YCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnZpZXdVdGlsLnNldFByb3BlcnR5KHZpZXcsIG5hbWUsIHZhbHVlKTtcblx0fVxuXG5cdEBwcm9maWxlXG5cdGFkZENsYXNzKHZpZXc6IE5nVmlldywgbmFtZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0aWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG5cdFx0XHROYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlckxvZyhgTmF0aXZlU2NyaXB0UmVuZGVyZXIuYWRkQ2xhc3MgJHtuYW1lfWApO1xuXHRcdH1cblx0XHR0aGlzLnZpZXdVdGlsLmFkZENsYXNzKHZpZXcsIG5hbWUpO1xuXHR9XG5cblx0QHByb2ZpbGVcblx0cmVtb3ZlQ2xhc3ModmlldzogTmdWaWV3LCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRpZiAoTmF0aXZlU2NyaXB0RGVidWcuaXNMb2dFbmFibGVkKCkpIHtcblx0XHRcdE5hdGl2ZVNjcmlwdERlYnVnLnJlbmRlcmVyTG9nKGBOYXRpdmVTY3JpcHRSZW5kZXJlci5yZW1vdmVDbGFzcyAke25hbWV9YCk7XG5cdFx0fVxuXHRcdHRoaXMudmlld1V0aWwucmVtb3ZlQ2xhc3ModmlldywgbmFtZSk7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRzZXRTdHlsZSh2aWV3OiBOZ1ZpZXcsIHN0eWxlTmFtZTogc3RyaW5nLCB2YWx1ZTogYW55LCBfZmxhZ3M/OiBSZW5kZXJlclN0eWxlRmxhZ3MyKTogdm9pZCB7XG5cdFx0aWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG5cdFx0XHROYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlckxvZyhgTmF0aXZlU2NyaXB0UmVuZGVyZXIuc2V0U3R5bGU6ICR7c3R5bGVOYW1lfSA9ICR7dmFsdWV9YCk7XG5cdFx0fVxuXHRcdHRoaXMudmlld1V0aWwuc2V0U3R5bGUodmlldywgc3R5bGVOYW1lLCB2YWx1ZSk7XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRyZW1vdmVTdHlsZSh2aWV3OiBOZ1ZpZXcsIHN0eWxlTmFtZTogc3RyaW5nLCBfZmxhZ3M/OiBSZW5kZXJlclN0eWxlRmxhZ3MyKTogdm9pZCB7XG5cdFx0aWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG5cdFx0XHROYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlckxvZygnTmF0aXZlU2NyaXB0UmVuZGVyZXIucmVtb3ZlU3R5bGU6ICR7c3R5bGVOYW1lfScpO1xuXHRcdH1cblx0XHR0aGlzLnZpZXdVdGlsLnJlbW92ZVN0eWxlKHZpZXcsIHN0eWxlTmFtZSk7XG5cdH1cblxuXHQvLyBVc2VkIG9ubHkgaW4gZGVidWcgbW9kZSB0byBzZXJpYWxpemUgcHJvcGVydHkgY2hhbmdlcyB0byBjb21tZW50IG5vZGVzLFxuXHQvLyBzdWNoIGFzIDx0ZW1wbGF0ZT4gcGxhY2Vob2xkZXJzLlxuXHRAcHJvZmlsZVxuXHRzZXRCaW5kaW5nRGVidWdJbmZvKHJlbmRlckVsZW1lbnQ6IE5nVmlldywgcHJvcGVydHlOYW1lOiBzdHJpbmcsIHByb3BlcnR5VmFsdWU6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLnNldEJpbmRpbmdEZWJ1Z0luZm86ICR7cmVuZGVyRWxlbWVudH0sICR7cHJvcGVydHlOYW1lfSA9ICR7cHJvcGVydHlWYWx1ZX1gKTtcblx0XHR9XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRzZXRFbGVtZW50RGVidWdJbmZvKHJlbmRlckVsZW1lbnQ6IGFueSwgX2luZm86IGFueSAvKlJlbmRlckRlYnVnSW5mbyovKTogdm9pZCB7XG5cdFx0aWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG5cdFx0XHROYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlckxvZyhgTmF0aXZlU2NyaXB0UmVuZGVyZXIuc2V0RWxlbWVudERlYnVnSW5mbzogJHtyZW5kZXJFbGVtZW50fWApO1xuXHRcdH1cblx0fVxuXG5cdEBwcm9maWxlXG5cdGludm9rZUVsZW1lbnRNZXRob2QoX3JlbmRlckVsZW1lbnQ6IE5nVmlldywgbWV0aG9kTmFtZTogc3RyaW5nLCBhcmdzOiBBcnJheTxhbnk+KSB7XG5cdFx0aWYgKE5hdGl2ZVNjcmlwdERlYnVnLmlzTG9nRW5hYmxlZCgpKSB7XG5cdFx0XHROYXRpdmVTY3JpcHREZWJ1Zy5yZW5kZXJlckxvZyhgTmF0aXZlU2NyaXB0UmVuZGVyZXIuaW52b2tlRWxlbWVudE1ldGhvZCAke21ldGhvZE5hbWV9ICR7YXJnc31gKTtcblx0XHR9XG5cdH1cblxuXHRAcHJvZmlsZVxuXHRzZXRWYWx1ZShfcmVuZGVyTm9kZTogYW55LCBfdmFsdWU6IHN0cmluZykge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLnNldFZhbHVlIHJlbmRlck5vZGU6ICR7X3JlbmRlck5vZGV9LCB2YWx1ZTogJHtfdmFsdWV9YCk7XG5cdFx0fVxuXHR9XG5cblx0QHByb2ZpbGVcblx0bGlzdGVuKHJlbmRlckVsZW1lbnQ6IGFueSwgZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQ6IGFueSkgPT4gYm9vbGVhbik6ICgpID0+IHZvaWQge1xuXHRcdGlmIChOYXRpdmVTY3JpcHREZWJ1Zy5pc0xvZ0VuYWJsZWQoKSkge1xuXHRcdFx0TmF0aXZlU2NyaXB0RGVidWcucmVuZGVyZXJMb2coYE5hdGl2ZVNjcmlwdFJlbmRlcmVyLmxpc3RlbjogJHtldmVudE5hbWV9YCk7XG5cdFx0fVxuXHRcdC8vIEV4cGxpY2l0bHkgd3JhcCBpbiB6b25lXG5cdFx0bGV0IHpvbmVkQ2FsbGJhY2sgPSAoLi4uYXJncykgPT4ge1xuXHRcdFx0dGhpcy56b25lLnJ1bigoKSA9PiB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0cmVuZGVyRWxlbWVudC5vbihldmVudE5hbWUsIHpvbmVkQ2FsbGJhY2spO1xuXHRcdGlmIChldmVudE5hbWUgPT09IFZpZXcubG9hZGVkRXZlbnQgJiYgcmVuZGVyRWxlbWVudC5pc0xvYWRlZCkge1xuXHRcdFx0Y29uc3Qgbm90aWZ5RGF0YSA9IHsgZXZlbnROYW1lOiBWaWV3LmxvYWRlZEV2ZW50LCBvYmplY3Q6IHJlbmRlckVsZW1lbnQgfTtcblx0XHRcdHpvbmVkQ2FsbGJhY2sobm90aWZ5RGF0YSk7XG5cdFx0fVxuXHRcdHJldHVybiAoKSA9PiByZW5kZXJFbGVtZW50Lm9mZihldmVudE5hbWUsIHpvbmVkQ2FsbGJhY2spO1xuXHR9XG59XG4iXX0=