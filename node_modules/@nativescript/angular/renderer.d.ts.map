{"version":3,"file":"renderer.d.ts","sources":["renderer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone, Renderer2, RendererStyleFlags2 } from '@angular/core';\nimport { ViewUtil } from './view-util';\nimport { NgView, InvisibleNode } from './element-registry';\nexport declare class NativeScriptRenderer extends Renderer2 {\n    private rootView;\n    private zone;\n    private viewUtil;\n    data: {\n        [key: string]: any;\n    };\n    constructor(rootView: NgView, zone: NgZone, viewUtil: ViewUtil);\n    appendChild(parent: NgView, newChild: NgView): void;\n    insertBefore(parent: NgView, newChild: NgView, refChild: NgView): void;\n    removeChild(parent: any, oldChild: NgView): void;\n    selectRootElement(selector: string): NgView;\n    parentNode(node: NgView): any;\n    nextSibling(node: NgView): NgView;\n    createComment(_value: any): InvisibleNode;\n    createElement(name: any, _namespace: string): NgView;\n    createText(_value: string): InvisibleNode;\n    createViewRoot(hostElement: NgView): NgView;\n    projectNodes(parentElement: NgView, nodes: NgView[]): void;\n    destroy(): void;\n    setAttribute(view: NgView, name: string, value: string, namespace?: string): void;\n    removeAttribute(_el: NgView, _name: string): void;\n    setProperty(view: any, name: string, value: any): void;\n    addClass(view: NgView, name: string): void;\n    removeClass(view: NgView, name: string): void;\n    setStyle(view: NgView, styleName: string, value: any, _flags?: RendererStyleFlags2): void;\n    removeStyle(view: NgView, styleName: string, _flags?: RendererStyleFlags2): void;\n    setBindingDebugInfo(renderElement: NgView, propertyName: string, propertyValue: string): void;\n    setElementDebugInfo(renderElement: any, _info: any): void;\n    invokeElementMethod(_renderElement: NgView, methodName: string, args: Array<any>): void;\n    setValue(_renderNode: any, _value: string): void;\n    listen(renderElement: any, eventName: string, callback: (event: any) => boolean): () => void;\n}\n"]}