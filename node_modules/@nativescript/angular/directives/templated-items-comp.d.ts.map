{"version":3,"file":"templated-items-comp.d.ts","sources":["templated-items-comp.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, DoCheck, ElementRef, EmbeddedViewRef, EventEmitter, InjectionToken, IterableDiffer, IterableDiffers, OnDestroy, TemplateRef, ViewContainerRef, NgZone } from '@angular/core';\nimport { View, KeyedTemplate, ItemEventData, TemplatedItemsView } from '@nativescript/core';\nexport declare class ItemContext {\n    $implicit?: any;\n    item?: any;\n    index?: number;\n    even?: boolean;\n    odd?: boolean;\n    constructor($implicit?: any, item?: any, index?: number, even?: boolean, odd?: boolean);\n}\nexport interface SetupItemViewArgs {\n    view: EmbeddedViewRef<any>;\n    data: any;\n    index: number;\n    context: ItemContext;\n}\nexport declare abstract class TemplatedItemsComponent implements DoCheck, OnDestroy, AfterContentInit {\n    private _iterableDiffers;\n    private zone;\n    abstract get nativeElement(): TemplatedItemsView;\n    protected templatedItemsView: TemplatedItemsView;\n    protected _items: any;\n    protected _differ: IterableDiffer<KeyedTemplate>;\n    protected _templateMap: Map<string, KeyedTemplate>;\n    loader: ViewContainerRef;\n    setupItemView: EventEmitter<SetupItemViewArgs>;\n    itemTemplateQuery: TemplateRef<ItemContext>;\n    itemTemplate: TemplateRef<ItemContext>;\n    get items(): any;\n    set items(value: any);\n    constructor(_elementRef: ElementRef, _iterableDiffers: IterableDiffers, zone: NgZone);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    private setItemTemplates;\n    registerTemplate(key: string, template: TemplateRef<ItemContext>): void;\n    onItemLoading(args: ItemEventData): void;\n    setupViewRef(viewRef: EmbeddedViewRef<ItemContext>, data: any, index: number): void;\n    protected getItemTemplateViewFactory(template: TemplateRef<ItemContext>): () => View;\n    private detectChangesOnChild;\n    ngDoCheck(): void;\n}\nexport interface ComponentView {\n    rootNodes: Array<any>;\n    destroy(): void;\n}\nexport declare type RootLocator = (nodes: Array<any>, nestLevel: number) => View;\nexport declare function getItemViewRoot(viewRef: ComponentView, rootLocator?: RootLocator): View;\nexport declare const TEMPLATED_ITEMS_COMPONENT: InjectionToken<TemplatedItemsComponent>;\nexport declare class TemplateKeyDirective {\n    private templateRef;\n    private comp;\n    constructor(templateRef: TemplateRef<any>, comp: TemplatedItemsComponent);\n    set nsTemplateKey(value: any);\n}\n"]}